{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","helpers.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","openTodo","selectedTodo","isTodoSelected","id","className","map","todo","cn","completed","title","type","onClick","TodoFilter","query","setQuery","filterBy","setFilterBy","onSubmit","event","preventDefault","value","onChange","target","Object","values","todoStatus","word","charAt","toUpperCase","slice","toLowerCase","placeholder","name","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","closeTodo","useState","user","setUser","isError","setIsError","loadData","a","userId","currentUser","useEffect","isCompleted","color","href","email","App","setTodos","setSelectedTodo","isLoading","setIsLoading","setError","loadTodos","todosArray","visibleTodos","newTodos","newQuery","trim","filter","includes","Active","Completed","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,0FCUCC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,SACAC,EACI,EADJA,aAEMC,EAAiB,SAACC,GAAD,OAA4B,OAAZF,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAOA,GAE5D,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAGJ,gCACGL,EAAMM,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OAERF,UAAWG,IAAG,CACZ,4BAA6BL,EAAeI,EAAKH,MAJrD,UAOE,oBAAIC,UAAU,eAAd,SACGE,EAAKH,KAER,oBAAIC,UAAU,eAAd,SACGE,EAAKE,WACJ,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IAAG,CACf,mBAAoBD,EAAKE,UACzB,mBAAoBF,EAAKE,YAF3B,SAKGF,EAAKG,UAGV,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVM,KAAK,SACLC,QAAS,kBAAMX,EAASM,IAJ1B,SAME,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IAAG,MAAO,CACtB,UAAWL,EAAeI,EAAKH,IAC/B,eAAgBD,EAAeI,EAAKH,gBAlCvCG,EAAKH,c,SDnCVN,K,UAAAA,E,gBAAAA,E,uBAAAA,M,iBEYL,IAAMe,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YAkBA,OACE,uBACEZ,UAAU,mBACVa,SAXuB,SAACC,GAC1BA,EAAMC,kBAQN,UAIE,mBAAGf,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRgB,MAAOL,EACPM,SAtBiB,SAACH,GAC1BF,EAAYE,EAAMI,OAAOF,QAkBnB,SAKGG,OAAOC,OAAO3B,GAAYQ,KAAI,SAAAoB,GAAU,OACvC,wBAAyBL,MAAOK,EAAhC,UChBuBC,EDiBCD,EChB7BC,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,gBDe3BL,GChBpB,IAA8BC,WDwB/B,oBAAGtB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRM,KAAK,OACLN,UAAU,QACV2B,YAAY,YACZC,KAAK,cACLZ,MAAOP,EACPQ,SA7CkB,SAACH,GACzBJ,EAASI,EAAMI,OAAOF,UA8ClB,sBAAMhB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdS,GACC,sBAAMT,UAAU,gBAAgB6B,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACRxB,KAAK,SACLN,UAAU,SACV,aAAW,QACXO,QA9Ca,WACvBG,EAAS,gBE5BAqB,G,MAAmB,kBAC9B,qBAAK/B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCSnB,SAASgC,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICZMC,EAA6B,SAAC,GAAiC,IAA/B9C,EAA8B,EAA9BA,aAAc+C,EAAgB,EAAhBA,UACzD,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,uCAAG,4BAAAC,EAAA,+EDUKC,GCR4B,OAAZvD,QAAY,IAAZA,OAAA,EAAAA,EAAcuD,SAAU,EDQrBpB,EAAG,iBAAiBoB,ICV5C,OAEPC,EAFO,OAIbN,EAAQM,GAJK,gDAMbJ,GAAW,GANE,kCDUI,IAACG,ICVL,oBAAH,qDAUdE,qBAAU,WACRJ,MACC,CAACrD,IAEJ,IAAM0D,EAA0B,OAAZ1D,QAAY,IAAZA,KAAcO,UAC9B,OACA,UAEJ,OACE,sBAAKJ,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBACb8C,EAIE,sBAAK9C,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYH,QAJZ,IAIYA,OAJZ,EAIYA,EAAcE,MAI1B,wBACEO,KAAK,SACLN,UAAU,SACV,UAAQ,cACRO,QAASqC,OAIb,sBAAK5C,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGH,QADH,IACGA,OADH,EACGA,EAAcQ,QAEhB2C,GACC,oBAAInB,MAAO,CAAE2B,MAAO,OAApB,4BAIF,oBAAGxD,UAAU,QAAQ,UAAQ,aAA7B,UAEE,wBAAQA,UAAWG,IAAG,CACpB,oBAAmB,OAACN,QAAD,IAACA,KAAcO,WAClC,0BAAoBP,QAApB,IAAoBA,OAApB,EAAoBA,EAAcO,YAFpC,SAKGmD,IAGF,OAED,mBAAGE,KAAI,iBAAYX,EAAKY,OAAxB,SACGZ,EAAKlB,gBA1Cd,cAAC,EAAD,QCzBG+B,EAAgB,WAC3B,MAA0Bd,mBAAiB,IAA3C,mBAAOlD,EAAP,KAAciE,EAAd,KACA,EAAwCf,mBAAsB,MAA9D,mBAAOhD,EAAP,KAAqBgE,EAArB,KACA,EAA0BhB,mBAAS,IAAnC,mBAAOpC,EAAP,KAAcC,EAAd,KACA,EAAgCmC,mBAAmB,OAAnD,mBAAOlC,EAAP,KAAiBC,EAAjB,KACA,EAAkCiC,oBAAS,GAA3C,mBAAOiB,EAAP,KAAkBC,EAAlB,KACA,EAA4BlB,oBAAS,GAArC,mBAAOG,EAAP,KAAgBgB,EAAhB,KAEMC,EAAS,uCAAG,4BAAAd,EAAA,+EFEUnB,EAAY,UEFtB,OAERkC,EAFQ,OAIdN,EAASM,GACTH,GAAa,GACbC,GAAS,GANK,gDAQdA,GAAS,GARK,yBAUdD,GAAa,GAVC,4EAAH,qDAcfT,qBAAU,WACRW,MACC,IAEH,IAAME,EJpCwB,SAC9BxE,EACAc,EACAE,GAEA,IAAIyD,EAAQ,YAAOzE,GAEnB,GAAIc,EAAO,CACT,IAAM4D,EAAW5D,EAAMiB,cAAc4C,OAErCF,EAAWA,EAASG,QAAO,SAAArE,GAAI,OAC7BA,EAAKG,MAAMqB,cAAc8C,SAASH,MAItC,OAAQ1D,GACN,KAAKlB,EAAWgF,OACd,OAAOL,EAASG,QAAO,SAAArE,GAAI,OAAKA,EAAKE,aACvC,KAAKX,EAAWiF,UACd,OAAON,EAASG,QAAO,SAAArE,GAAI,OAAIA,EAAKE,aAKxC,OAAOgE,EIYcO,CAAiBhF,EAAOc,EAAOE,GAMpD,OACE,qCACE,qBAAKX,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACES,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,YAAaA,MAIjB,sBAAKZ,UAAU,QAAf,UACIgD,EAQE,2EANA,cAAC,EAAD,CACErD,MAAOwE,EACPvE,SAAUiE,EACVhE,aAAcA,IAQnBiE,GAAa,cAAC,EAAD,cAMrBjE,GACC,cAAC,EAAD,CACE+C,UA1CU,WAChBiB,EAAgB,OA0CVhE,aAAcA,QClFxB+E,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9cc3639f.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  openTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  openTodo,\n  selectedTodo,\n}) => {\n  const isTodoSelected = (id: number) => selectedTodo?.id === id;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={cn({\n              'has-background-info-light': isTodoSelected(todo.id),\n            })}\n          >\n            <td className=\"is-vcentered\">\n              {todo.id}\n            </td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => openTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn('far', {\n                    'fa-eye': !isTodoSelected(todo.id),\n                    'fa-eye-slash': isTodoSelected(todo.id),\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport { FilterBy } from '../../types/FilterBy';\nimport { makeFirstToUpperCase } from '../../helpers';\n\ninterface Props {\n  query: string;\n  setQuery: (query: string) => void;\n  filterBy: FilterBy;\n  setFilterBy: (filterBy: FilterBy) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  filterBy,\n  setFilterBy,\n}) => {\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterBy(event.target.value as FilterBy);\n  };\n\n  const handleFormOnSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleClickClear = () => {\n    setQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleFormOnSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterBy}\n            onChange={handleSelectChange}\n          >\n            {Object.values(TodoStatus).map(todoStatus => (\n              <option key={todoStatus} value={todoStatus}>\n                {makeFirstToUpperCase(todoStatus)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          name=\"searchInput\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear\"\n              onClick={handleClickClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { FilterBy } from './types/FilterBy';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  filterBy: FilterBy,\n) => {\n  let newTodos = [...todos];\n\n  if (query) {\n    const newQuery = query.toLowerCase().trim();\n\n    newTodos = newTodos.filter(todo => (\n      todo.title.toLowerCase().includes(newQuery)\n    ));\n  }\n\n  switch (filterBy) {\n    case TodoStatus.Active:\n      return newTodos.filter(todo => !todo.completed);\n    case TodoStatus.Completed:\n      return newTodos.filter(todo => todo.completed);\n    default:\n      break;\n  }\n\n  return newTodos;\n};\n\nexport function makeFirstToUpperCase(word: string) {\n  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo | null;\n  closeTodo: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, closeTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  const loadData = async () => {\n    try {\n      const currentUser = await getUser(selectedTodo?.userId || 0);\n\n      setUser(currentUser);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [selectedTodo]);\n\n  const isCompleted = selectedTodo?.completed\n    ? 'Done'\n    : 'Planned';\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n              {isError && (\n                <h2 style={{ color: 'red' }}>\n                  User not found\n                </h2>\n              )}\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong className={cn({\n                  'has-text-danger': !selectedTodo?.completed,\n                  'has-text-success': selectedTodo?.completed,\n                })}\n                >\n                  {isCompleted}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { FilterBy } from './types/FilterBy';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<FilterBy>('all');\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setError] = useState(false);\n\n  const loadTodos = async () => {\n    try {\n      const todosArray = await getTodos();\n\n      setTodos(todosArray);\n      setIsLoading(false);\n      setError(false);\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = getFilteredTodos(todos, query, filterBy);\n\n  const closeTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isError\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    openTodo={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                ) : (\n                  <span>\n                    Error, failed to load data from server.\n                  </span>\n                )}\n\n              {isLoading && <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          closeTodo={closeTodo}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}